package com.shiningcity.javaApi.pojo;

public class MysqlSuoyin {

	//参考文章：mysql的索引方法btree和hash的区别
		//https://blog.csdn.net/liehuo123/article/details/82657021
	//参考文章：mysql的索引方法btree和hash的区别
		//http://www.91w.net/database/330.html
	
	//（1）在进行count()统计某列的记录数的时候（null不会统计进来）或者查询不是某个值的时候（null值不会查出来），但是空值是会进行统计到其中的。
	//（2）MySQL中的NULL其实是占用空间的，空值('')是不占用空间的
	//（3）判断NULL 用IS NULL 或者 is not null，在sql语句中可以用IFNULL(expr1,expr2)函数，如果想判断空字符用=''或者 <>、!=''来进行处理。
			//1. SELECT IF(1=1,2,3); 则输出2
			//2. SELECT IF(1=2,2,3); 则输出3
			//1.SELECT IFNULL(null,"2");则输出2
			//2.SELECT IFNULL(3,"2");则输出3
	//唯一索引可在索引列插入多次null，适用于表中的一些业务列，不能出现重复，但可以插入空值，比如用户表的身份证号码
			
	/*

索引是存储在磁盘上的数据结构，它包含多数据表里素偶有记录的引用指针，所以创建索引需要耗费空间内存。

一、什么是索引
	索引是对数据库中一列或者多列的值进行排序的一种数据结构
	索引的作用是为了提高查询的速度，创建索引必须确保索引列使用在条件语句中的
	mysql中主键列和唯一约束列自带索引
	查询时，只有使用到有索引的列，才能提高查询速度。
	索引会降低插入速度，数据量越大，插入速度越慢。
	索引的算法：hash索引，适合等值查找，在范围查找时可能发生hash冲突。
			B+Tree索引，适合范围查找，没有hash冲突问题。
	

二、索引的分类：
	1、根据索引结构划分：Hash索引，B+Tree索引
	
			hash索引检索效率非常高，索引的检索可以一次定位，不想b-tree所以你呢需要从根节点到枝节点，
		最后才能访问懂啊叶节点这样多次的IO访问，所以hash索引的查询效率要远高于b-tree索引。
			hash索引仅仅能满足“=”，“IN”，“<=>”查询，不能使用范围查询。
			hash索引无法被用来避免数据的排序操作。
			hash索引不能利用部分索引键查询。
		由于组合索引，hash索引在计算hash值的时候是组合索引键合并后再一起计算hash值。而不是单独计算hash值，
		所以通过组合索引的前面一个或几个索引键进行查询的时候，hash索引无法被利用。
			hash索引任何时候都不能避免表扫描。
			hash索引在遇到大量hash值相等的情况后，性能不一定就会比b+tree索引高。
			
			b+tree索引，mysql中的B+Tree索引的物理文件大多数都是以Balance Tree的结构来存储的，也就是所有实际需要的数据都存放于Tree的叶子节点上。
		而且到任何一个叶子节点的最短路径的长度都是完全相同的，所以我们称之为B+Tree索引。
			多列索引可以用于其中某一列的查询。
	2、索引分类：MySQL目前有三种索引类型。FULLTEXT、NURMAL、UNIQUE
		全文索引，普通索引，唯一索引
		
		全文索引（FULLTEXT）：
		5.5及以前版本只能在MyISAM引擎的表的char、varchar、text字段上创建全文索引。仅支持英文，通过空格作为分隔符。
		5.6版本InnoDB存储引擎开始支持全文索引。仅支持英文，通过空格作为分隔符。
		5.7版本通过使用ngram插件开始支持中文。
		
		MySQL支持三种模式的全文检索模式
		1.自然语言模式：通过MATCH AGAINST 传递某个特定的字符串进行检索
		2.布尔模式：可以为检索的字符串增加操作符，
		“+”表示必须包含
		“-”表示必须排除
		“>”表示出现该单词时增加相关性
		“<”表示出现该单词时降低相关性
		“*”表示通配符
		“~”允许出现该单词，但是出现时相关性为负
		“""”表示短语
		no operation表示find word是可选的，如果出现，相关性会更高
		3.查询扩展模式：
		应用场景：查询的关键字太短，用户需要implied knowledge(隐含知识)时进行。比如，对于单词database的查询，用户可能希望查询的不仅仅是包含database的文档，还指那些包含mysql、oracle、db2的单词。
		该查询会执行两次检索，第一次使用给定的短语进行检索，第二次结合第一次相关性比较高的进行检索
		
		全文索引默认最小4个字符
			
三、索引对增删改的性能影响。
	1、insert过程：先把数据插入到表中，然后再把数据插入到相关索引中，如果表中有多个索引，则需要维护5个索引。
	2、把数据插入索引的过程中，为了维护索引中字段的顺序，会先在索引中查找该数据，如果找到，就把数据插入到后边空闲的地方，
		如果没有找到，就先把值加入到叶子节点，然后在分支节点中新增这个值 和 指向叶子节点的指针。
		在这个过程中，如果某个页满了，还要新申请一个空的页，把满的页拆分开，把一般的数据放入新页中，而且为了保证数据一致性，在高并发情况下，会对相应的索引页加锁（闩锁，一种低级别的内存锁），
		如此看来，这个过程开销比较大。
	3、delete操作：与insert相反，删除一条数据需要把这条数据设计到的多个索引中的数据删除。
	4、update：当update涉及到索引列的情况下才需要维护索引。
	5、逻辑删除可以提高效率，定时对逻辑删除的数据进行物理删除。
			
			
			
			
			
	 */
}
